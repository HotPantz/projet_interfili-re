import cv2
import numpy as np

# Liste des noms de fichiers d'images
image_files = ['feurouge.jpg', 'stop.jpeg', 'vitesse80.jpg', 'vitesse50.jpg', 'stop2.jpg', 'stop3.webp']

# Fonction pour vérifier si un polygone est rouge dans l'espace HSV
def is_red_polygon_hsv(image, polygon):
    # Convertir l'image en espace HSV
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Extraire les coordonnées du polygone
    polygon_points = polygon.reshape(-1, 2)

    # Isoler la région du polygone dans l'espace HSV
    roi_hsv = hsv[polygon_points[:, 1].min():polygon_points[:, 1].max(),
                  polygon_points[:, 0].min():polygon_points[:, 0].max()]

    # Calculer la moyenne des valeurs HSV dans le polygone
    average_hsv = np.mean(roi_hsv, axis=(0, 1)).astype(np.uint8)

    # Définir les plages de couleur pour le rouge en espace HSV
    lower_red1 = np.array([176, 95, 161], dtype=np.uint8)
    upper_red1 = np.array([186, 255, 255], dtype=np.uint8)
    lower_red2 = np.array([0, 180, 173], dtype=np.uint8)
    upper_red2 = np.array([255, 255, 255], dtype=np.uint8)

    # Créer des masques pour vérifier si la couleur moyenne est rouge
    mask_red1 = cv2.inRange(average_hsv, lower_red1, upper_red1)
    mask_red2 = cv2.inRange(average_hsv, lower_red2, upper_red2)

    return np.any(mask_red1) or np.any(mask_red2)

# Parcourir chaque image dans la liste
for image_file in image_files:
    # Charger l'image à partir d'un fichier
    image = cv2.imread(image_file)

    # Vérifier si l'image a été chargée correctement
    if image is None:
        print(f"Impossible de charger l'image {image_file}.")
        continue

    # Convertir l'image en niveaux de gris
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Appliquer un flou gaussien pour réduire le bruit et faciliter la détection des contours
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Utiliser la détection de contours Canny
    edges = cv2.Canny(blurred, 50, 150)

    # Trouver les contours dans l'image
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Parcourir les contours pour trouver le panneau stop
    for contour in contours:
        # Calculer la superficie du contour
        area = cv2.contourArea(contour)

        # Ignorer les petits contours (ajustez la valeur selon vos besoins)
        if area < 50:
            continue
            
        # Approximer le contour à un polygone
        epsilon = 0.01 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)

        # Si le polygone a 8 côtés (un octogone), c'est probablement un panneau stop
        if len(approx) == 8 and is_red_polygon_hsv(image, approx):
            cv2.drawContours(image, [approx], 0, (0, 255, 0), 2)
            cv2.putText(image, 'Panneau STOP', (approx[0][0][0], approx[0][0][1] - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Afficher l'image résultante
    cv2.imshow(f'Panneau STOP Detecte - {image_file}', image)
    cv2.waitKey(0)

# Fermer toutes les fenêtres
cv2.destroyAllWindows()
